plugins {
    id 'java-library'
    id 'jacoco'
    //id 'com.kncept.junit.reporter' version '2.1.0'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    api 'com.fasterxml.jackson.core:jackson-databind:2.18.3'
    api 'org.slf4j:slf4j-api:2.0.17'
    api 'ch.qos.logback:logback-classic:1.5.18'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.12.1'
    //testImplementation 'org.junit.jupiter:junit-jupiter-api:5.12.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.12.1'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    testImplementation 'io.rest-assured:rest-assured:5.5.1'
    //testImplementation 'io.rest-assured:rest-assured-common:5.5.1'
    
    testImplementation 'org.jacoco:org.jacoco.core:0.8.12'
    testImplementation 'org.jacoco:org.jacoco.agent:0.8.12'
    testImplementation 'org.jacoco:org.jacoco.report:0.8.12'

}

group = 'dk.kodeninjaer.testing'
version = '1.0-SNAPSHOT'
description = 'postman-to-restassured'
java {
   sourceCompatibility = '21'
}

ext {
    generatedTestDir = "build/generated"
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

tasks.named('test', Test) {
    useJUnitPlatform()
    testLogging {
        events("PASSED", "FAILED", "SKIPPED")
    }
}



jacoco {
    toolVersion = "0.8.12"
    //reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}


/* generate and compile */

// register a new directory for source files
sourceSets {
    generatedTests {
        java.srcDir generatedTestDir
        compileClasspath += sourceSets.main.output + sourceSets.main.compileClasspath + sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.main.output + sourceSets.main.compileClasspath + sourceSets.test.compileClasspath
    }
}

// a task to execute the generatedTests source set
tasks.register("runGeneratedTests", Test) {
    useJUnitPlatform()
    dependsOn tasks.compileGeneratedTestsJava // Ensure generated tests are compiled
    testClassesDirs = sourceSets.generatedTests.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath + sourceSets.generatedTests.runtimeClasspath
}

tasks.register("generateUnitTests", JavaExec) {
    description = 'Generates dynamic unit tests from Postman collections'
    group = 'verification'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "dk.kodeninjaer.testing.converter.Main"
    args = [
            "src/test/resources/TestCollection.postman_collection.json",
            "dk.kodeninjaer.test",
            "GradleTest"
        ]
}

// when check task is run we add our generatedTests that way if test task 
// is run it will also run our generatedTests
tasks.named('check') {
   dependsOn(tasks.runGeneratedTests)
}

tasks.named('compileTestJava') {
    dependsOn(tasks.generateUnitTests)
}

tasks.named('compileGeneratedTestsJava') {
    dependsOn(compileTestJava)
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    //dependsOn runGeneratedTests //TODO: reenable this

    // exclude Main.class from the coverage report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "dk/kodeninjaer/testing/converter/Main.class"
            ])
        }))
    }

    // Include generated tests in coverage report
    executionData test
    //executionData runGeneratedTests //TODO: reenable this
    
    reports {
        xml.required = true
        html.required = true
    }
    
    // Add generated tests to coverage sources
    sourceDirectories.from = files(sourceSets.main.java.srcDirs)
    classDirectories.from = files(sourceSets.main.output.classesDirs, generatedTestDir)

}
